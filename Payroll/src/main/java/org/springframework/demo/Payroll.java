package org.springframework.demo;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.demo.Employees.Commission;import org.springframework.demo.Employees.Employee;import org.springframework.demo.Employees.Hourly;import org.springframework.demo.Employees.SalariedCommission;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.Scanner;public class Payroll {    private Scanner sc;    private EmployeeDAO employeeDao;    private DBase dbConnection;    private SalaryService salaryCalculatorService;    @Autowired    public Payroll(EmployeeDAO employeeDao, DBase dbConnection, SalaryService salaryCalculatorService) {        this.employeeDao = employeeDao;        this.dbConnection = dbConnection;        this.salaryCalculatorService = salaryCalculatorService;        this.sc = new Scanner(System.in);    }    public void add10PercentSalaryForSalariedCommission() {        String sql = "SELECT * FROM salaried";        ResultSet resultSet = dbConnection.getData(sql);        try {            while (resultSet.next()) {                Integer id = resultSet.getInt("id");                String name = resultSet.getString("name");                Double salary = resultSet.getDouble("salary");                Double percentageSales = resultSet.getDouble("percentage_sales");                Double amountOfCommission = resultSet.getDouble("amount_of_commission");                Double newSalary = salary * 1.1;                employeeDao.updateSalary(                        new SalariedCommission(id, name, newSalary, percentageSales, amountOfCommission),                        salary                );            }        } catch (SQLException sqlE) {            System.out.println("ERROR!");            System.out.println(sqlE);        }    }    private void changeSalaryForSalariedEmployee() {        String sql = "SELECT * FROM salaried";        ArrayList<Employee> employees = new ArrayList<>();        ResultSet resultSet = dbConnection.getData(sql);        try {            int i = 0;            while (resultSet.next()) {                Integer id = resultSet.getInt("id");                String name = resultSet.getString("name");                Double salary = resultSet.getDouble("salary");                employees.add(new Employee(id, name, salary));                System.out.println((i++) + ") " + "ID: " + id + " " + " Name: " + name);            }        } catch (SQLException sqlE) {            System.out.println("ERROR!");            System.out.println(sqlE);        }        System.out.print("chose employee: ");        Integer indexEmployee = sc.nextInt();        Double oldSalary = employees.get(indexEmployee).getSalary();        System.out.print("input new salary: ");        employees.get(indexEmployee).setSalary(sc.nextDouble());        employeeDao.updateSalary(employees.get(indexEmployee), oldSalary);    }    private void changeSalaryForHourlyEmployee() {        String sql = "SELECT * FROM hourly";        ArrayList<Employee> employees = new ArrayList<>();        ResultSet resultSet = dbConnection.getData(sql);        try {            int i = 0;            while (resultSet.next()) {                Integer id = resultSet.getInt("id");                String name = resultSet.getString("name");                Double salary = resultSet.getDouble("salary");                Integer work_hour = resultSet.getInt("work-hour");                Double salary_hour = resultSet.getDouble("salary-hour");                employees.add(new Hourly(id, name, salary, work_hour, salary_hour));                System.out.println((i++) + ") " + "ID: " + id + " " + " Name: " + name);            }        } catch (SQLException sqlE) {            System.out.println("ERROR!");            System.out.println(sqlE);        }        System.out.print("chose employee: ");        Integer indexEmployee = sc.nextInt();        Double oldSalary = employees.get(indexEmployee).getSalary();        System.out.print("input new salary hour: ");        ((Hourly)employees.get(indexEmployee)).setSalaryHour(sc.nextDouble());        salaryCalculatorService.calculateSalary((Hourly) employees.get(indexEmployee));        employeeDao.updateSalary(employees.get(indexEmployee), oldSalary);    }    private void changeSalaryForCommissionEmployee() {        String sql = "SELECT * FROM commission";        ArrayList<Employee> employees = new ArrayList<>();        ResultSet resultSet = dbConnection.getData(sql);        try {            int i = 0;            while (resultSet.next()) {                Integer id = resultSet.getInt("id");                String name = resultSet.getString("name");                Double salary = resultSet.getDouble("salary");                Double percentageSales = resultSet.getDouble("percentage_sales");                employees.add(new Commission(id, name, salary, percentageSales));                System.out.println((i++) + ") " + "ID: " + id + " " + " Name: " + name);            }        } catch (SQLException sqlE) {            System.out.println("ERROR!");            System.out.println(sqlE);        }        System.out.print("chose employee: ");        Integer indexEmployee = sc.nextInt();        Double oldSalary = employees.get(indexEmployee).getSalary();        System.out.print("input sale amount: ");        Double saleAmount = sc.nextDouble();        salaryCalculatorService.calculateSalary((Commission) employees.get(indexEmployee), saleAmount);        employeeDao.updateSalary(employees.get(indexEmployee), oldSalary);    }    private void changeSalaryForSalariedCommissionEmployee() {        String sql = "SELECT * FROM salaried_commission";        ArrayList<Employee> employees = new ArrayList<>();        ResultSet resultSet = dbConnection.getData(sql);        try {            int i = 0;            while (resultSet.next()) {                Integer id = resultSet.getInt("id");                String name = resultSet.getString("name");                Double salary = resultSet.getDouble("salary");                Double percentageSales = resultSet.getDouble("percentage_sales");                Double amountOfCommission = resultSet.getDouble("amount_of_commission");                employees.add(new SalariedCommission(id, name, salary, percentageSales, amountOfCommission));                System.out.println((i++) + ") " + "ID: " + id + " " + " Name: " + name);            }        } catch (SQLException sqlE) {            System.out.println("ERROR!");            System.out.println(sqlE);        }        System.out.print("chose employee: ");        Integer indexEmployee = sc.nextInt();        Double oldSalary = employees.get(indexEmployee).getSalary();        System.out.print("input sale amount: ");        Double saleAmount = sc.nextDouble();        salaryCalculatorService.calculateSalary((SalariedCommission) employees.get(indexEmployee), saleAmount);        employeeDao.updateSalary(employees.get(indexEmployee), oldSalary);    }    public void show() {        boolean isWord = true;        while(isWord) {            System.out.println("\nAdding 10% base salaries for all Salaried-Commission employees - 1");            System.out.println("change salary for Salaried employee - 2");            System.out.println("change salary for Hourly employee - 3");            System.out.println("change salary for Commission employee - 4");            System.out.println("change salary for Salaried-Commission employee - 5");            System.out.println("Exit Program - 0");            System.out.print("Please enter: ");            String chose = sc.next();            switch (chose) {                case "1":                    add10PercentSalaryForSalariedCommission();                    break;                case "2":                    changeSalaryForSalariedEmployee();                    break;                case "3":                    changeSalaryForHourlyEmployee();                    break;                case "4":                    changeSalaryForCommissionEmployee();                    break;                case "5":                    changeSalaryForSalariedCommissionEmployee();                    break;                case "0":                    isWord = false;                    break;                default:                    System.out.println("Invalid argument!");            }        }    }}